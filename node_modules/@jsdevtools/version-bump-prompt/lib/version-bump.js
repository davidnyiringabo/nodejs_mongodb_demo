"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionBump = void 0;
const get_new_version_1 = require("./get-new-version");
const get_old_version_1 = require("./get-old-version");
const git_1 = require("./git");
const operation_1 = require("./operation");
const run_npm_script_1 = require("./run-npm-script");
const update_files_1 = require("./update-files");
/**
 * Bumps the version number in one or more files, prompting the user if necessary.
 * Optionally also commits, tags, and pushes to git.
 */
async function versionBump(arg = {}) {
    if (typeof arg === "string") {
        arg = { release: arg };
    }
    let operation = await operation_1.Operation.start(arg);
    // Get the old and new version numbers
    await get_old_version_1.getOldVersion(operation);
    await get_new_version_1.getNewVersion(operation);
    // Run npm preversion script, if any
    await run_npm_script_1.runNpmScript("preversion" /* PreVersion */, operation);
    // Update the version number in all files
    await update_files_1.updateFiles(operation);
    // Run npm version script, if any
    await run_npm_script_1.runNpmScript("version" /* Version */, operation);
    // Git commit and tag, if enabled
    await git_1.gitCommit(operation);
    await git_1.gitTag(operation);
    // Run npm postversion script, if any
    await run_npm_script_1.runNpmScript("postversion" /* PostVersion */, operation);
    // Push the git commit and tag, if enabled
    await git_1.gitPush(operation);
    return operation.results;
}
exports.versionBump = versionBump;
//# sourceMappingURL=version-bump.js.map