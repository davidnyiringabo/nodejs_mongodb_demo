"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseArgs = void 0;
const commandLineArgs = require("command-line-args");
const semver = require("semver");
const release_type_1 = require("../release-type");
const exit_code_1 = require("./exit-code");
const help_1 = require("./help");
/**
 * Parses the command-line arguments
 */
function parseArgs(argv) {
    try {
        let args = commandLineArgs([
            { name: "preid", type: String },
            { name: "commit", alias: "c", type: String },
            { name: "tag", alias: "t", type: String },
            { name: "push", alias: "p", type: Boolean },
            { name: "all", alias: "a", type: Boolean },
            { name: "no-verify", type: Boolean },
            { name: "quiet", alias: "q", type: Boolean },
            { name: "version", alias: "v", type: Boolean },
            { name: "help", alias: "h", type: Boolean },
            { name: "ignore-scripts", type: Boolean },
            { name: "files", type: String, multiple: true, defaultOption: true },
        ], { argv });
        let parsedArgs = {
            help: args.help,
            version: args.version,
            quiet: args.quiet,
            options: {
                preid: args.preid,
                commit: args.commit,
                tag: args.tag,
                push: args.push,
                all: args.all,
                noVerify: args["no-verify"],
                files: args.files,
                ignoreScripts: args["ignore-scripts"],
            }
        };
        // If --preid is used without an argument, then throw an error, since it's probably a mistake.
        // If they want to use the default value ("beta"), then they should not pass the argument at all
        if (args.preid === null) {
            throw new Error("The --preid option requires a value, such as \"alpha\", \"beta\", etc.");
        }
        // If --commit is used without an argument, then treat it as a boolean flag
        if (args.commit === null) {
            parsedArgs.options.commit = true;
        }
        // If --tag is used without an argument, then treat it as a boolean flag
        if (args.tag === null) {
            parsedArgs.options.tag = true;
        }
        // If a version number or release type was specified, then it will mistakenly be added to the "files" array
        if (parsedArgs.options.files && parsedArgs.options.files.length > 0) {
            let firstArg = parsedArgs.options.files[0];
            if (firstArg === "prompt" || release_type_1.isReleaseType(firstArg) || semver.valid(firstArg)) {
                parsedArgs.options.release = firstArg;
                parsedArgs.options.files.shift();
            }
        }
        return parsedArgs;
    }
    catch (error) {
        // There was an error parsing the command-line args
        return errorHandler(error);
    }
}
exports.parseArgs = parseArgs;
function errorHandler(error) {
    console.error(error.message);
    console.error(help_1.usageText);
    return process.exit(exit_code_1.ExitCode.InvalidArgument);
}
//# sourceMappingURL=parse-args.js.map