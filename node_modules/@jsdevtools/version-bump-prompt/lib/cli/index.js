"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const log_symbols_1 = require("log-symbols");
const manifest_1 = require("../manifest");
const version_bump_1 = require("../version-bump");
const exit_code_1 = require("./exit-code");
const help_1 = require("./help");
const parse_args_1 = require("./parse-args");
/**
 * The main entry point of the CLI
 *
 * @param args - The command-line arguments (e.g. ["major", "--preid=alpha", "-ctpa"])
 */
async function main(args) {
    try {
        // Setup global error handlers
        process.on("uncaughtException", errorHandler);
        process.on("unhandledRejection", errorHandler);
        // Parse the command-line arguments
        let { help, version, quiet, options } = parse_args_1.parseArgs(args);
        if (help) {
            // Show the help text and exit
            console.log(help_1.helpText);
            process.exit(exit_code_1.ExitCode.Success);
        }
        else if (version) {
            // Show the version number and exit
            console.log(manifest_1.manifest.version);
            process.exit(exit_code_1.ExitCode.Success);
        }
        else {
            if (!quiet) {
                options.progress = progress;
            }
            await version_bump_1.versionBump(options);
        }
    }
    catch (error) {
        errorHandler(error);
    }
}
exports.main = main;
function progress({ event, script, updatedFiles, skippedFiles, newVersion }) {
    switch (event) {
        case "file updated" /* FileUpdated */:
            console.log(log_symbols_1.success, `Updated ${updatedFiles.pop()} to ${newVersion}`);
            break;
        case "file skipped" /* FileSkipped */:
            console.log(log_symbols_1.info, `${skippedFiles.pop()} did not need to be updated`);
            break;
        case "git commit" /* GitCommit */:
            console.log(log_symbols_1.success, "Git commit");
            break;
        case "git tag" /* GitTag */:
            console.log(log_symbols_1.success, "Git tag");
            break;
        case "git push" /* GitPush */:
            console.log(log_symbols_1.success, "Git push");
            break;
        case "npm script" /* NpmScript */:
            console.log(log_symbols_1.success, `Npm run ${script}`);
            break;
    }
}
function errorHandler(error) {
    let message = error.message || String(error);
    if (process.env.DEBUG || process.env.NODE_ENV === "development") {
        message = error.stack || message;
    }
    console.error(message);
    process.exit(exit_code_1.ExitCode.FatalError);
}
//# sourceMappingURL=index.js.map