import { NormalizedOptions } from "./normalize-options";
import { ReleaseType } from "./release-type";
import { VersionBumpOptions } from "./types/version-bump-options";
import { NpmScript, ProgressEvent } from "./types/version-bump-progress";
import { VersionBumpResults } from "./types/version-bump-results";
interface OperationState {
    release: ReleaseType | undefined;
    oldVersionSource: string;
    oldVersion: string;
    newVersion: string;
    commitMessage: string;
    tagName: string;
    updatedFiles: string[];
    skippedFiles: string[];
}
interface UpdateOperationState extends Partial<OperationState> {
    event?: ProgressEvent;
    script?: NpmScript;
}
/**
 * All of the inputs, outputs, and state of a single `versionBump()` call.
 */
export declare class Operation {
    /**
     * The options for this operation.
     */
    options: NormalizedOptions;
    /**
     * The current state of the operation.
     */
    readonly state: Readonly<OperationState>;
    /**
     * The results of the operation.
     */
    get results(): VersionBumpResults;
    /**
     * The callback that's used to report the progress of the operation.
     */
    private readonly _progress?;
    /**
     * Private constructor.  Use the `Operation.start()` static method instead.
     */
    private constructor();
    /**
     * Starts a new `versionBump()` operation.
     */
    static start(input: VersionBumpOptions): Promise<Operation>;
    /**
     * Updates the operation state and results, and reports the updated progress to the user.
     */
    update({ event, script, ...newState }: UpdateOperationState): this;
}
export {};
