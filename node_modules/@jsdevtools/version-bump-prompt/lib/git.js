"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitPush = exports.gitTag = exports.gitCommit = void 0;
const ezSpawn = require("@jsdevtools/ez-spawn");
/**
 * Commits the modififed files to Git, if the `commit` option is enabled.
 */
async function gitCommit(operation) {
    if (!operation.options.commit) {
        return operation;
    }
    let { all, noVerify, message } = operation.options.commit;
    let { updatedFiles, newVersion } = operation.state;
    let args = [];
    if (all) {
        // Commit ALL files, not just the ones that were bumped
        args.push("--all");
    }
    if (noVerify) {
        // Bypass git commit hooks
        args.push("--no-verify");
    }
    // Create the commit message
    let commitMessage = formatVersionString(message, newVersion);
    args.push("--message", commitMessage);
    // Append the file names last, as variadic arguments
    if (!all) {
        args = args.concat(updatedFiles);
    }
    await ezSpawn.async("git", ["commit", ...args]);
    return operation.update({ event: "git commit" /* GitCommit */, commitMessage });
}
exports.gitCommit = gitCommit;
/**
 * Tags the Git commit, if the `tag` option is enabled.
 */
async function gitTag(operation) {
    if (!operation.options.tag) {
        return operation;
    }
    let { commit, tag } = operation.options;
    let { newVersion } = operation.state;
    let args = [
        // Create an annotated tag, which is recommended for releases.
        // See https://git-scm.com/docs/git-tag
        "--annotate",
        // Use the same commit message for the tag
        "--message",
        formatVersionString(commit.message, newVersion),
    ];
    // Create the Tag name
    let tagName = formatVersionString(tag.name, newVersion);
    args.push(tagName);
    await ezSpawn.async("git", ["tag", ...args]);
    return operation.update({ event: "git tag" /* GitTag */, tagName });
}
exports.gitTag = gitTag;
/**
 * Pushes the Git commit and tag, if the `push` option is enabled.
 */
async function gitPush(operation) {
    if (!operation.options.push) {
        return operation;
    }
    // Push the commit
    await ezSpawn.async("git", "push");
    if (operation.options.tag) {
        // Push the tag
        await ezSpawn.async("git", ["push", "--tags"]);
    }
    return operation.update({ event: "git push" /* GitPush */ });
}
exports.gitPush = gitPush;
/**
 * Accepts a version string template (e.g. "release v" or "This is the %s release").
 * If the template contains any "%s" placeholders, then they are replaced with the version number;
 * otherwise, the version number is appended to the string.
 */
function formatVersionString(template, newVersion) {
    if (template.includes("%s")) {
        return template.replace(/%s/g, newVersion);
    }
    else {
        return template + newVersion;
    }
}
//# sourceMappingURL=git.js.map