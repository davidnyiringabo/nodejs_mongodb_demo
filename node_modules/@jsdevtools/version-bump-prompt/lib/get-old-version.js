"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOldVersion = void 0;
const semver = require("semver");
const fs_1 = require("./fs");
const manifest_1 = require("./manifest");
/**
 * Finds the current version number from files such as package.json.
 * An error is thrown if no version number can be found.
 */
async function getOldVersion(operation) {
    let { cwd, files } = operation.options;
    // Check all JSON files in the files list
    let filesToCheck = files.filter((file) => file.endsWith(".json"));
    // Always check package.json
    if (!filesToCheck.includes("package.json")) {
        filesToCheck.push("package.json");
    }
    // Check each file, in order, and return the first valid version number we find
    for (let file of filesToCheck) {
        let version = await readVersion(file, cwd);
        if (version) {
            // We found the current version number!
            return operation.update({
                oldVersionSource: file,
                oldVersion: version,
            });
        }
    }
    // If we get here, then no version number was found
    throw new Error(`Unable to determine the current version number. Checked ${filesToCheck.join(", ")}.`);
}
exports.getOldVersion = getOldVersion;
/**
 * Tries to read the version number from the specified JSON file.
 *
 * @returns - The version number, or undefined if the file doesn't have a version number
 */
async function readVersion(file, cwd) {
    try {
        let { data: manifest } = await fs_1.readJsonFile(file, cwd);
        if (manifest_1.isManifest(manifest)) {
            if (semver.valid(manifest.version)) {
                return manifest.version;
            }
        }
    }
    catch (error) {
        // Ignore errors (no such file, not valid JSON, etc.)
        // Just try the next file instead.
        return undefined;
    }
}
//# sourceMappingURL=get-old-version.js.map