"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeTextFile = exports.readTextFile = exports.writeJsonFile = exports.readJsonFile = void 0;
const detectIndent = require("detect-indent");
const detectNewline = require("detect-newline");
const fs = require("fs");
const path = require("path");
/**
 * Reads a JSON file and returns the parsed data.
 */
async function readJsonFile(name, cwd) {
    let file = await readTextFile(name, cwd);
    let data = JSON.parse(file.data);
    let indent = detectIndent(file.data).indent;
    let newline = detectNewline(file.data);
    return { ...file, data, indent, newline };
}
exports.readJsonFile = readJsonFile;
/**
 * Writes the given data to the specified JSON file.
 */
async function writeJsonFile(file) {
    let json = JSON.stringify(file.data, undefined, file.indent);
    if (file.newline) {
        json += file.newline;
    }
    return writeTextFile({ ...file, data: json });
}
exports.writeJsonFile = writeJsonFile;
/**
 * Reads a text file and returns its contents.
 */
function readTextFile(name, cwd) {
    return new Promise((resolve, reject) => {
        let filePath = path.join(cwd, name);
        fs.readFile(filePath, "utf8", (err, text) => {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    path: filePath,
                    data: text,
                });
            }
        });
    });
}
exports.readTextFile = readTextFile;
/**
 * Writes the given text to the specified file.
 */
function writeTextFile(file) {
    return new Promise((resolve, reject) => {
        fs.writeFile(file.path, file.data, (err) => {
            if (err) {
                reject(err);
            }
            else {
                resolve();
            }
        });
    });
}
exports.writeTextFile = writeTextFile;
//# sourceMappingURL=fs.js.map