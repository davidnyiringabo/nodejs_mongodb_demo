"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.host = void 0;
const merge_1 = require("./merge");
const to_json_1 = require("./to-json");
const url = createURL(window.location.href);
const cwdURL = createURL(".", url);
/**
 * Information about the host environment that the code is running in.
 */
exports.host = {
    global: window,
    url,
    path: url.href,
    cwdURL,
    cwd: cwdURL.href,
    os: getOSInfo(),
    node: false,
    browser: getBrowserInfo(),
    env: {},
    ci: false,
    merge: merge_1.merge,
    toJSON: to_json_1.toJSON,
};
// Merge the global `host` object (if it exists)
merge_1.mergeGlobalHost(exports.host, exports.host.global.host);
/**
 * Creates a URL object from a URL string
 */
function createURL(url, base) {
    try {
        return new URL(url, base);
    }
    catch (_) {
        // Poor-man's polyfill for browsers that don't support the URL class
        return { href: base ? base.href : url };
    }
}
/**
 * Returns information about the current Browser host.
 */
function getBrowserInfo() {
    let mobile = /(Mobile|Android|iPhone|iPad)/.test(navigator.userAgent);
    let browsers = {
        IE: false,
        edge: false,
        chrome: false,
        firefox: false,
        safari: false,
        mobile,
    };
    // NOTE: The order matters here!
    let browserPatterns = [
        { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: "IE", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: "IE", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ },
    ];
    // Find the FIRST matching browser
    for (let { key, pattern } of browserPatterns) {
        let match = pattern.exec(navigator.userAgent);
        if (match) {
            let major = parseInt(match[1], 10) || 0;
            let minor = parseInt(match[2], 10) || 0;
            let patch = parseInt(match[3], 10) || 0;
            browsers[key] = {
                version: parseFloat(`${major}.${minor}`),
                majorVersion: major,
                minorVersion: minor,
                patchVersion: patch,
                [`v${major}`]: true,
                mobile,
            };
            break;
        }
    }
    return browsers;
}
/**
 * Returns information about the current operating system.
 */
function getOSInfo() {
    let osInfo = {
        windows: false,
        mac: false,
        linux: false,
    };
    // NOTE: The order matters here!
    let osPatterns = [
        { key: "mac", pattern: /(Mac OS|Macintosh|iPhone|iPad)/ },
        { key: "windows", pattern: /(Windows NT|Windows Phone)/ },
        { key: "linux", pattern: /(Linux|Android)/ },
    ];
    // Find the FIRST matching OS pattern
    for (let { key, pattern } of osPatterns) {
        let match = pattern.exec(navigator.userAgent);
        if (match) {
            // We found the OS, so mark it as `true` and leave all the others `false`
            osInfo[key] = true;
            break;
        }
    }
    return osInfo;
}
//# sourceMappingURL=isomorphic.browser.js.map