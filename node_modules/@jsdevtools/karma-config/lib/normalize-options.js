"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.environmentVariable = exports.environmentFlag = exports.arrayify = exports.normalizeOptions = void 0;
const host_environment_1 = require("@jsdevtools/host-environment");
/**
 * Normalizes user-specified options and applies defaults.
 */
function normalizeOptions(options) {
    options = options || {};
    options.browsers = options.browsers || {};
    let platform = normalizeOption(options.platform, process.platform, String).toLowerCase();
    let windows = platform.startsWith("win");
    let mac = /^darwin|^mac|^osx/.test(platform);
    let linux = !mac && !windows;
    let testDir = normalizeOption(options.testDir, "test", String);
    let ie = normalizeOption(options.browsers.ie, false, Boolean);
    return {
        windows,
        mac,
        linux,
        testDir,
        sourceDir: normalizeOption(options.sourceDir, "src", String),
        CI: normalizeOption(options.CI, defaultCI(), Boolean),
        transpile: normalizeOption(options.transpile, ie, Boolean),
        coverage: normalizeOption(options.coverage, defaultCoverage(), Boolean),
        tests: arrayify(options.tests) || [`${testDir}/**/*.+(spec|test).+(js|jsx|mjs)`],
        fixtures: arrayify(options.fixtures) || [],
        serve: arrayify(options.serve) || [`${testDir}/**/*`],
        config: Object.assign({}, options.config),
        browsers: {
            chrome: normalizeOption(options.browsers.chrome, linux, Boolean),
            firefox: normalizeOption(options.browsers.firefox, linux, Boolean),
            safari: normalizeOption(options.browsers.safari, mac, Boolean),
            edge: normalizeOption(options.browsers.edge, windows, Boolean),
            ie,
        },
    };
}
exports.normalizeOptions = normalizeOptions;
/**
 * Returns the given option as the appropriate type, or the default value.
 */
function normalizeOption(option, defaultValue, type) {
    if (option === undefined) {
        return defaultValue;
    }
    else {
        return type(option);
    }
}
/**
 * Returns the default value for the `coverage` option, possibly from the CLI or environment variable.
 */
function defaultCoverage() {
    let envVar = environmentFlag("KARMA_COVERAGE");
    let cliFlag = process.argv.includes("--coverage");
    return cliFlag || envVar;
}
/**
 * Returns the default value for the `CI` option, possibly from an environment variable.
 */
function defaultCI() {
    let CI = environmentFlag("CI");
    let karmaCI = environmentFlag("KARMA_CI");
    return Boolean(CI || karmaCI || host_environment_1.host.ci);
}
/**
 * Wraps the given value in an array, if necessary
 */
function arrayify(value) {
    if (Array.isArray(value)) {
        return value;
    }
    else if (value) {
        return [value];
    }
}
exports.arrayify = arrayify;
/**
 * Returns the boolean value of the specified environment variable.
 */
function environmentFlag(name) {
    let value = environmentVariable(name);
    return !["", "false", "off", "no"].includes(value);
}
exports.environmentFlag = environmentFlag;
/**
 * Returns the normalized string value of the specified environment variable.
 */
function environmentVariable(name) {
    return (process.env[name] || "").trim().toLowerCase();
}
exports.environmentVariable = environmentVariable;
//# sourceMappingURL=normalize-options.js.map