"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackLoaderName = exports.hasWebpackLoader = exports.addPlugin = exports.mergeConfig = void 0;
/**
 * Does a shallow merge of two objects, only overriding values that are `undefined`.
 */
function mergeConfig(target, defaults) {
    let config = target || {};
    for (let key of Object.keys(defaults)) {
        let defaultValue = defaults[key];
        if (config[key] === undefined) {
            config[key] = defaultValue;
        }
    }
    return config;
}
exports.mergeConfig = mergeConfig;
/**
 * Adds the specified Karma plugin to the config
 */
function addPlugin(config, plugin) {
    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires
    config.plugins.push(require(plugin));
    return config;
}
exports.addPlugin = addPlugin;
/**
 * Determines whether the specified Webpack loader already exists in the rules list.
 */
function hasWebpackLoader(rules, name) {
    for (let rule of rules) {
        if (rule && rule.use) {
            if (Array.isArray(rule.use)) {
                for (let loader of rule.use) {
                    if (webpackLoaderName(loader) === name) {
                        return true;
                    }
                }
            }
            else if (webpackLoaderName(rule.use) === name) {
                return true;
            }
        }
    }
    return false;
}
exports.hasWebpackLoader = hasWebpackLoader;
/**
 * Returns the name of the given Webpack loader, if possible.
 */
function webpackLoaderName(loader) {
    if (typeof loader === "string") {
        return loader;
    }
    else if (typeof loader === "object") {
        return loader.loader;
    }
}
exports.webpackLoaderName = webpackLoaderName;
//# sourceMappingURL=util.js.map