"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildConfig = void 0;
const configure_browsers_1 = require("./configure-browsers");
const configure_coverage_1 = require("./configure-coverage");
const configure_webpack_1 = require("./configure-webpack");
const normalize_options_1 = require("./normalize-options");
const util_1 = require("./util");
/**
 * Builds the Kamra configuration object based on the given options.
 */
function buildConfig(options) {
    let opts = (0, normalize_options_1.normalizeOptions)(options);
    let config = (0, util_1.mergeConfig)(opts.config, {
        plugins: [],
        frameworks: ["mocha", "host-environment"],
        reporters: ["verbose"],
        files: opts.fixtures.concat(opts.tests, opts.serve.map(serveFile)),
    });
    (0, util_1.addPlugin)(config, "@jsdevtools/karma-host-environment");
    (0, util_1.addPlugin)(config, "karma-verbose-reporter");
    (0, util_1.addPlugin)(config, "karma-mocha");
    config = (0, configure_webpack_1.configureWebpack)(config, opts);
    config = (0, configure_browsers_1.configureBrowsers)(config, opts);
    config = (0, configure_coverage_1.configureCoverage)(config, opts);
    return config;
}
exports.buildConfig = buildConfig;
/**
 * Returns a FilePattern that serves the specified file, but does not include it by default.
 */
function serveFile(file) {
    if (typeof file === "string") {
        return { pattern: file, included: false, served: true };
    }
    else {
        file.served = true;
        return file;
    }
}
//# sourceMappingURL=build-config.js.map